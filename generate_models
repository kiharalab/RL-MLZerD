#!/usr/bin/env python3

import sys
import os
import itertools
import io
import Bio.PDB as bpdb
from protein import Protein
import pandas as pd
import string
import glob
import re
import copy

def transform_topology(top_list):
    #['2-3', '0-2', '1-3']
    interaction_list = []
    for order in top_list:
        d_list = []
        data = list(order.split(','))
        for item in data:
            d_list.append(int(item))
        interaction_list.append(d_list)

    return interaction_list
if len(sys.argv) < 3:
    print('Usage Path, chains... e.g ')
    exit()

path = sys.argv[1]
chains = sys.argv[2]
target = path.split('/')[1]
out_path = path + ''
out_type = 'pure'
unbound = 'no'

docking_out = path + '/' + target + '_1.0_mcrl.out'
rmds_out = path +  '/output/post_dock_data.txt'
protein = Protein(len(chains),chains,target,300,150,100,'','./',1.0,1,out_path,1.0,1,unbound)
fh = open(docking_out).readlines()
decoy_pref = 'model_'
for line in fh:
    if 'Decoy' in line:
        decoy_number = int(line.split(',')[1].split(' ')[-1])
        val = line.split('[[')[-1].split(']]')
        topology = val[0].replace(']','').replace('[','')
        topology = re.sub('(,[^,]*),', r'\1|', topology).split('|')
        topology = transform_topology(topology)
        actions = val[1].split(']')[0].replace('[','')
        actions = actions.split(',')[1:]
        actions = [int(x) for x in actions]
        transformed_protein = protein.get_transformed_atoms(topology,actions)
        protein.write_complex(transformed_protein,decoy_number)
print('Done. Check ' +  path + 'output/ for pdb files')
